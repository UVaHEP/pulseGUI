#!/usr/bin/python
#######################################################
# convert CSV file to tree
#######################################################

#check for argparse 
argparseFound = True
try: 
    import argparse
except:
    print "Argparse not found, falling back on standard argument parsing"
    argparseFound = False 

import random
import collections
import sys, os, commands, re, os.path
import getopt, string, tempfile, time
from array import array

rootlibs=commands.getoutput("root-config --libdir")
sys.path.append(rootlibs)

from ROOT import TFile, gROOT, TString, TTree, TCanvas, TMultiGraph, TGraph, TLine, TLegend


def readDataPython(file): 
    temp = os.path.split(file)[1].split('_')[0]
    f = open(file, 'r')
    line = f.readline()
    V = array("d")
    I = array("d")
    if line.find("VAR2") != -1:
        for line in f.readlines(): 
            Repeat,VAR2,Point,Voltage,Current,Time = line.strip().split(',')
            V.append(float(Voltage))
            I.append(float(Current))
            

    return (temp,V,I)


def calculateDerivatives(V, I): 

    vbar = array("d")
    dIdVi = array("d")
    deltaMax = 0
    deltaIdx = 0

    for j in range(len(V)-1):

        if V[j]<40 : continue
        vbar.append((V[j]+V[j+1])/2)
        dV=V[j+1]-V[j]
        ibar=(I[j+1]+I[j])/2
        dI=I[j+1]-I[j]
        delta=1/ibar*dI/dV
        dIdVi.append(delta)
        if delta>deltaMax:
            deltaMax=delta
            deltaIdx=len(dIdVi)-1
    return (dIdVi, vbar, deltaIdx, deltaMax)
    

def generateGraphs(temp,V,I, dIdVi, vbar, deltaIdx, deltaMax): 

    temperature = float(temp[0:-1])    
    gIV = TGraph(len(V), V, I)
    gDV = TGraph(len(vbar), vbar, dIdVi)
    gIV.SetLineColor(random.randint(1,9))
    gIV.SetTitle(temp)#+" I-V Curve;Volts;Current [Amps]");
    gIV.SetMinimum(10e-9)
    graphDict = {'name':temp,
     'gIV':gIV,
     'gDV':gDV,
     'vbar':vbar,
     'deltaIdx':deltaIdx,
     'deltaMax':deltaMax,
     'temp':temperature            
     }
    
    return graphDict






#First we have two methods for getting our list of files, argparse and normal 
#arguments
goodFiles = []
if not argparseFound: 

    if len(sys.argv)<2:
        print "Usage:",sys.argv[0],"csv_file_name"
        sys.exit()
        

    for i in range (1,len(sys.argv)): 
        try:
            f = open(sys.argv[i])
            f.close()
            goodFiles.append(sys.argv[i])
        except IOError:
            print "Bad File:"+sys.argv[i]
            
    
    dFile=sys.argv[1]
    if not os.path.isfile(dFile):
        print dFile,"not found - exit on error"
        sys.exit()


# optional list of data files w/ illumination
    if len(sys.argv)==3:
        fLight=sys.argv[2]
        if not os.path.isfile(fLight):
            print fLight,"not found - exit on error"
            sys.exit()


else: 
    parser = argparse.ArgumentParser(description='Process I-V Files generated by either a Keithley or Agilent Source Meter')
    parser.add_argument('files', metavar='F', type=str, nargs='+',
                        help='List of I-V files to process')
    args = parser.parse_args()
    for dFile in args.files: 
        try:
            f = open(dFile)
            f.close()
            goodFiles.append(dFile)
        except IOError:
            print "Bad File:"+dFile
            
    

#Vbreak=TLine(vbar[deltaIdx],1e-8,vbar[deltaIdx],I[len(V)-1])
#Vbreak2=TLine(vbar[deltaIdx],0,vbar[deltaIdx],deltaMax)
vbreaklines = []
graphs = []
vbreaks = array("d")
temp = array("d")

for f in goodFiles: 
    print "Processing:"+f
    tempname,V,I = readDataPython(f)
    dIdVi,vbar,deltaIdx,deltaMax = calculateDerivatives(V, I)
    graphset =generateGraphs(tempname,V,I,dIdVi, vbar, deltaIdx, deltaMax)
    graphs.append(graphset)

    Vbreak = TLine(vbar[deltaIdx],0,vbar[deltaIdx],deltaMax)
    Vbreak.SetLineColor(graphset['gIV'].GetLineColor())
    vbreaks.append(vbar[deltaIdx])
    vbreaklines.append(Vbreak)
    temp.append(graphset['temp'])



    print "Breakdown voltage:",vbar[deltaIdx],"Volts"    
    


canvas = TCanvas("c2","c2",800,400)
#canvas.Divide(2,1)
#canvas.cd(1).SetLogy()

print "Drawing Breakdown versus temperature"
vvsbreak = TGraph(len(vbreaks), temp,vbreaks)
vvsbreak.SetTitle("Breakdown Voltage vs Temperature;Temperature(C);Breakdown Voltage(V)")
 #vvsbreak.Fit("pol1")
vvsbreak.Draw("A*")


time.sleep(20)


print "Drawing Multigraph"
canvas.Clear()
multi = TMultiGraph()






for graphset in graphs:
#    graphset[0].Draw("apl")
    multi.Add(graphset['gIV'],"PL")


multi.SetTitle("I-V Curve;Volts;Current [Amps]")


multi.Draw("A")
canvas.BuildLegend(0.15, 0.60, 0.45, 0.85)

for breakdown in vbreaklines:
    breakdown.Draw(); 


time.sleep(20)




exit()    
